"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[1074],{2583:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var o=n(4848),r=n(8453);const c={sidebar_position:6},a="Property Object",i={id:"learn/javascript/property-object",title:"Property Object",description:"Experimental",source:"@site/docs/learn/javascript/property-object.mdx",sourceDirName:"learn/javascript",slug:"/learn/javascript/property-object",permalink:"/docs/learn/javascript/property-object",draft:!1,unlisted:!1,editUrl:"https://github.com/openexus/docs-source/tree/main/packages/create-docusaurus/templates/shared/docs/learn/javascript/property-object.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Module Object",permalink:"/docs/learn/javascript/module-object"},next:{title:"Dynamic Properties",permalink:"/docs/learn/javascript/dynamic"}},d={},u=[{value:"RESEARCH",id:"research",level:3}];function s(t){const e={admonition:"admonition",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"property-object",children:"Property Object"}),"\n",(0,o.jsx)(e.admonition,{type:"warning",children:(0,o.jsx)(e.p,{children:"Experimental"})}),"\n",(0,o.jsx)(e.p,{children:"Getting the property object allows you to update the properties."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Q: Should we hide if remove is called on a static property?"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"const count = context.getProperty('count');\n\ncount.datatype; // get datatype\ncount.set('datatype', 'text');\ncount.hidden; // get hidden field\ncount.set('hidden', true);\ncount.get(); // get data on the property\ncount.set('data', 'hello');\ncount.remove(); // remove property, only if property is dynamic\ncount.hide(); // hide property\n"})}),"\n",(0,o.jsx)(e.h3,{id:"research",children:"RESEARCH"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"const count = context.getProperty('count');\n// option 1\ncount.key; \ncount.name;\ncount.description;\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n// option 2\ncount.details.key; // get\ncount.details.name; // get\ncount.details.description; // get\ncount.details.name = 'new property name'; // set\ncount.details.description = 'new description'; // set\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n// option 3\ncount.key.get(); \ncount.name.get();\ncount.description.get();\ncount.key.set(); // error thrown\ncount.name.set('new property name');\ncount.description.set('new description');\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"const count = context.getProperty('count');\n// option 1\ncount.key; // get the key\ncount.name; // get the name\ncount.description; // get the description\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n// option 2\ncount.details.key; // get the key\ncount.details.name; // get the name\ncount.details.description; // get the description\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n// option 3\ncount.key.get(); // get the key\ncount.name.get(); // get the name\ncount.description.get(); // get the description\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"const count = context.getProperty('count');\n// option 1\ncount.key; // get the key\ncount.name; // get the name\ncount.description; // get the description\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n// option 2\ncount.details.key; // get the key\ncount.details.name; // get the name\ncount.details.description; // get the description\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n// option 3\ncount.key.get(); // get the key\ncount.name.get(); // get the name\ncount.description.get(); // get the description\ncount.get(); // get value 2\ncount.set(4); // set value to 4\ncount.remove(); // remove current property\ncount.hide(); // hide current property\n// option 4\ncount.key; // get the key\ncount.name; // get the name\ncount.description; // get the description\ncount.name = 'new name'; // set\ncount.description = 'new description'; // get the description\ncount.data; // get value 2\ncount.data = 4; // set value to 4\ncount.remove(); // remove current property\ncount.hidden = true;\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"const count = context.getProperty('count');\n\n\n// option 1: get, set for each field\ncount.getDatatype();\ncount.setDatatype('text');\ncount.getHidden();\ncount.setHidden(true);\ncount.getData();\ncount.setData('hello');\ncount.remove(); // remove is not a field\n\n// option 1b: get, set for each field, data is get/set\ncount.getDatatype();\ncount.setDatatype('text');\ncount.getHidden();\ncount.setHidden(true);\ncount.get();\ncount.set('hello');\ncount.remove(); // remove is not a field\n\n// option 2: only setter\ncount.datatype; // get datatype\ncount.setDatatype('text');\ncount.hidden; // get hidden field\ncount.setHidden(true);\ncount.data; // get data on the property\ncount.set('hello');\ncount.remove(); // remove is not a field\n\n// option 2b: only setter, but data is get/set\ncount.datatype; // get datatype\ncount.setDatatype('text');\ncount.hidden; // get hidden field\ncount.setHidden(true);\ncount.get(); // get data on the property\ncount.set('hello');\ncount.remove(); // remove is not a field\n\n// option 3: requires proxy\ncount.datatype; // get datatype\ncount.datatype = 'text';\ncount.hidden; // get hidden field\ncount.hidden = 'text';\ncount.data; // get data on the property\ncount.data = 'hello';\ncount.remove(); // remove is not a field\n\n// option 3b: requires proxy, but data is get/set, does not work for other languages (its going to be different anyway, but more deivation)\ncount.datatype; // get datatype\ncount.datatype = 'text';\ncount.hidden; // get hidden field\ncount.hidden = 'text';\ncount.get(); // get data on the property\ncount.set('hello');\ncount.remove(); // remove is not a field\n\n// option 4: 1 setter for all fields\ncount.datatype; // get datatype\ncount.set('datatype', 'text');\ncount.hidden; // get hidden field\ncount.set('hidden', true);\ncount.data; // get data on the property\ncount.set('data', 'hello');\ncount.remove(); // remove is not a field\n\n// option 4b: 1 setter for all fields, special for data\ncount.datatype; // get datatype\ncount.set('datatype', 'text');\ncount.hidden; // get hidden field\ncount.set('hidden', true);\ncount.get(); // get data on the property\ncount.set('hello'); // without 2nd parameter, it means data?\ncount.remove(); // remove is not a field\n\n// option 4c: 1 setter for all fields, data is getData and setData\ncount.datatype; // get datatype\ncount.set('datatype', 'text');\ncount.hidden; // get hidden field\ncount.set('hidden', true);\ncount.getData(); // get data on the property\ncount.setData('hello'); // without 2nd parameter, it means data?\ncount.remove(); // remove is not a field\n\n// option 4d: 1 setter for all fields, data is get/set, the rest is getAttribute\ncount.datatype; // get datatype\ncount.setAttribute('datatype', 'text');\ncount.hidden; // get hidden field\ncount.setAttribute('hidden', true);\ncount.get(); // get data on the property\ncount.set('hello'); // without 2nd parameter, it means data?\ncount.remove(); // remove is not a field\n\n// option 5: 1 getter/setter for all fields, special for data\ncount.get('datatype'); // get datatype\ncount.set('datatype', 'text');\ncount.get('hidden'); // get hidden field\ncount.set('hidden', true);\ncount.get('data'); // get data on the property\ncount.set('data', 'hello'); // without 2nd parameter, it means data?\ncount.remove(); // remove is not a field\n\n"})})]})}function p(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(s,{...t})}):s(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>i});var o=n(6540);const r={},c=o.createContext(r);function a(t){const e=o.useContext(c);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:a(t.components),o.createElement(c.Provider,{value:e},t.children)}}}]);