"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[9862],{7106:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var s=t(4848),i=t(8453);const r={sidebar_position:4},o="Overview",a={id:"learn/spec/manifest/index",title:"Overview",description:"You can simply define manifest as such:",source:"@site/docs/learn/spec/manifest/index.mdx",sourceDirName:"learn/spec/manifest",slug:"/learn/spec/manifest/",permalink:"/docs/learn/spec/manifest/",draft:!1,unlisted:!1,editUrl:"https://github.com/openexus/docs-source/tree/main/packages/create-docusaurus/templates/shared/docs/learn/spec/manifest/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Structure",permalink:"/docs/learn/spec/structure"},next:{title:"Setup",permalink:"/docs/learn/spec/manifest/setup/"}},c={},p=[{value:"Examples",id:"examples",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"You can simply define manifest as such:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:'title="manifest.yaml"',children:"key: # identifier for the node (unique within account namespace, lowercase with dashes)\nname: # any name for the node (required, <256 characters)\ndescription: # description for the node (read by humans)\npurpose: # purpose of the node (read by AI)\ninstructions:  # general instructions on how to use the node (read by AI)\ndocumentation: # markdown\n\nplatform: # js/\n\ncategories: # up to 2 categories for the node (comma seperated)\nkeywords: # list of keywords (comma seperated)\n\nicon: # url to image, relative path, or icon identifier from iconify\nthumbnail: # url to image, relative path, or icon identifier from iconify\nscreenshots:\n  - # url to image, or relative path\n  - # ...\ndemos: # or call examples like openapi?\n  - name: ... # TODO\n    description: ... # TODO\n    properties:\n      options: 'apple,banana,orange,pear'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note: you can define the manifest either in YAML or JSON format."}),"\n",(0,s.jsx)(n.p,{children:"Questions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"api? etc."}),"\n",(0,s.jsx)(n.li,{children:"javascript?, visual?"}),"\n",(0,s.jsx)(n.li,{children:"key?"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"Some examples of manifest definitions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"name: Input\ndescription: Input field for user input\npurpose: Input field to accept user input. Great for entering text, numbers, url,\n  emails, etc. Useful to bind with other modules that require user input.\ninstructions: \nicon: iconoir:input-field\ncategories: input\nkeywords: input\nscreenshots:\n  - https://example.com/screenshot.png\n  - https://example.com/screenshot2.png\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"name: Button\ndescription: A simple button that can trigger actions\npurpose: Input field to accept user input. Great for entering text, numbers, url,\n  emails, etc. Useful to bind with other modules that require user input.\ninstructions: \nicon: iconoir:input-field\ncategories: input\nkeywords: input\nscreenshots:\n  - https://example.com/screenshot.png\n  - https://example.com/screenshot2.png\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"name: API Fetch\ndescription: A simple button that can trigger actions\npurpose: Input field to accept user input. Great for entering text, numbers, url,\n  emails, etc. Useful to bind with other modules that require user input.\ninstructions: \nicon: iconoir:input-field\ncategories: input\nkeywords: input\nscreenshots:\n  - https://example.com/screenshot.png\n  - https://example.com/screenshot2.png\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"name: Unit Conversion\ndescription: A conversion node that can convert between two values. Types of conversion includes time, length, data, volume, area, mass, temperature, power, angle, and more.\npurpose: Great for \ninstructions:  ... \nicon: iconoir:input-field\ncategories: input\nkeywords: input\nscreenshots:\n  - https://example.com/screenshot.png\n  - https://example.com/screenshot2.png\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);