"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[2302],{1036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=n(4848),s=n(8453);const r={},a="Development Basics",o={id:"learn/getting-started/basics",title:"Development Basics",description:"Each node is essentially a modular building block with properties that can communicate with other nodes.",source:"@site/docs/learn/getting-started/basics.mdx",sourceDirName:"learn/getting-started",slug:"/learn/getting-started/basics",permalink:"/docs/learn/getting-started/basics",draft:!1,unlisted:!1,editUrl:"https://github.com/openexus/docs-source/tree/main/packages/create-docusaurus/templates/shared/docs/learn/getting-started/basics.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/docs/learn/getting-started/quick-start"},next:{title:"Publishing",permalink:"/docs/learn/getting-started/publishing"}},c={},l=[{value:"Code Language",id:"code-language",level:2},{value:"Counter Example",id:"counter-example",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"development-basics",children:"Development Basics"}),"\n",(0,i.jsx)(t.p,{children:"Each node is essentially a modular building block with properties that can communicate with other nodes."}),"\n",(0,i.jsx)(t.p,{children:"To specify a node, you then have to provide 3 main pieces of information:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Manifest: The general information about the node, e.g. name, description"}),"\n",(0,i.jsx)(t.li,{children:"Properties: The list of properties that the node have"}),"\n",(0,i.jsx)(t.li,{children:"Code: Some sort of logic/code that will run"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"code-language",children:"Code Language"}),"\n",(0,i.jsx)(t.p,{children:'The open spec is designed to be language agnostic. Each module is a "black box" where the internal logic should not matter. On the openexus.com platform, we currently support Javascript/Typescript.'}),"\n",(0,i.jsx)(t.h2,{id:"counter-example",children:"Counter Example"}),"\n",(0,i.jsx)(t.p,{children:"This is a basic node with a button that will increment a ((value)) property everytime the button is clicked."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",metastring:'title="manifest.yaml"',children:"name: Counter\ndescription: Simple counter example!\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",metastring:'title="properties.yaml"',children:"ui:\n  datatype: html\ncount:\n  datatype: number\n  default: 1\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",metastring:'title="src/main.jsx"',children:"function increment() {\n  // Increment the value of ((count))\n  context.set('count', context.get('count') + 1);\n}\n\nfunction render() {\n  // Function that returns JSX can bind to \n  // property of datatype `html`\n  return (\n    <button on:click={increment}>\n      Increment {context.get('count')}\n    </button>\n  )\n}\n\n// Bind a function that returns JSX\ncontext.set('ui', render);\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);