"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[9410],{6227:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=t(4848),i=t(8453);const a={sidebar_position:2},s="Request",o={id:"learn/spec/generate/request",title:"Request",description:"Generate is a powerful way to create modules with minimal work. For example, we can generate an open node if an OpenAPI spec is given.",source:"@site/docs/learn/spec/generate/request.mdx",sourceDirName:"learn/spec/generate",slug:"/learn/spec/generate/request",permalink:"/docs/learn/spec/generate/request",draft:!1,unlisted:!1,editUrl:"https://github.com/openexus/docs-source/tree/main/packages/create-docusaurus/templates/shared/docs/learn/spec/generate/request.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/learn/spec/generate/"},next:{title:"Embed",permalink:"/docs/learn/spec/generate/embed"}},p={},l=[{value:"Minimal OpenAPI Example: Pokemon",id:"minimal-openapi-example-pokemon",level:2},{value:"Extended OpenAPI Example: NYTimes",id:"extended-openapi-example-nytimes",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"request",children:"Request"}),"\n",(0,r.jsx)(n.p,{children:"Generate is a powerful way to create modules with minimal work. For example, we can generate an open node if an OpenAPI spec is given."}),"\n",(0,r.jsx)(n.h2,{id:"minimal-openapi-example-pokemon",children:"Minimal OpenAPI Example: Pokemon"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"name: Pokemon API Search\ndescription: Search for any pokemon and get its attributes!\ngenerate:\n  type: fetch\n  config:\n    # Provide a OpenAPI spec\n    openapi:\n      openapi: 3.0.0\n      servers:\n        - url: 'https://pokeapi.co/'\n      paths:\n        /api/v2/pokemon/{pokemon}/:\n          get:\n            operationId: pokemon_read\n            # Declare the manifest information here alternatively \n            # x-open:\n            #   name: Pokemon API Search\n            #   description: Search for any pokemon and get its attributes!\n            parameters:\n              - in: path\n                name: pokemon\n                required: true\n                schema:\n                  description: Pokemon name or unique integer value identifying this pokemon.\n                  title: Pokemon\n                  type: string\n                # Provide custom properties not in the OpenAPI spec via x-open\n                # x-open: \n                #   name: ...\n            responses:\n              default:\n                description: Attributes for the pokemon, including their weight, height, abilities and more.\n                content:\n                  text/plain:\n                    schema:\n                      type: string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note: Ideally the responses are also clearly typed and defined, but we are keeping this simple as an example."}),"\n",(0,r.jsx)(n.p,{children:"At the high level, each parameter would become a property.\nThis would generate a high quality module with the following properties:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:'pokemon: # As specified by paramters[0].name\n  name: Pokemon # As specified by the paramters[0].schema.name above\n  description: Pokemon name or unique integer value identifying this pokemon. # Copied from above\n  datatype: text # As defined by the paramters[0].schema.type above\n  required: true # As specified by paramters[0].required\n  default: "" # Since none is provided\n  io: input # All parameters will automatically be flagged as input\nresult:\n  description: Attributes for the pokemon, including their weight, height, abilities and more. # As specified by responses.default.description\n'})}),"\n",(0,r.jsx)(n.p,{children:"A fetch module includes other powerful and useful properties like debounce, triggers for errors, etc."}),"\n",(0,r.jsx)(n.h2,{id:"extended-openapi-example-nytimes",children:"Extended OpenAPI Example: NYTimes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:'name: New York Times Article Search\n# ... other manifest fields\ngenerate:\n  type: fetch\n  config:\n    # Provide a OpenAPI spec\n    openapi:\n      openapi: 3.0.0\n      servers:\n        - url: http://api.nytimes.com/svc/search/v2\n        - url: https://api.nytimes.com/svc/search/v2\n      info:\n        // highlight-next-line\n        # This info.description would be used as the manifest\'s description\n        description: With the Article Search API, you can search New York Times articles from Sept. 18, 1851 to today, retrieving headlines, abstracts, lead paragraphs, links to associated multimedia and other article metadata.\n        termsOfService: http://developer.nytimes.com/tou\n        title: Article Search API\n        version: 1.0.0\n      externalDocs:\n        url: http://developer.nytimes.com/\n      security:\n        - apikey: []\n      paths:\n        /articlesearch.json:\n          get:\n            description: |\n              Article Search requests use the following URI structure:\n            parameters:\n              - description: Search query term. Search is performed on the article body, headline and byline.\n                in: query\n                name: q\n                required: false\n                schema:\n                  type: string\n                // highlight-next-line\n                # Rename q to query for the property, and provide a name for the property\n                x-open:\n                  key: query\n                  name: Article Query\n              - description: YYYYMMDD Restricts responses to results with publication dates of the date specified or later.\n                in: query\n                name: begin_date\n                required: false\n                schema:\n                  type: string\n            responses:\n              "200":\n                content:\n                  application/json:\n                    schema:\n                      properties:\n                        // highlight-next-line\n                        # The first level of objects will all become properties\n                        response:\n                          properties:\n                            docs:\n                              items:\n                                $ref: "#/components/schemas/Doc"\n                              type: array\n                            meta:\n                              properties:\n                                hits:\n                                  type: integer\n                                offset:\n                                  type: integer\n                                time:\n                                  type: integer\n                              type: object\n                          type: object\n                      type: object\n                description: The docs requested by the article search.\n                // highlight-next-line\n                x-open: \n                  # If provided, we will expose the list/array as a property, and also the first item in the array as a top result.\n                  array:\n                    path: response.docs # only required if the developer wants to provide a list of results with the top result\n                    key: docs # optional, default is result_array\n                    name: Articles # optional\n                    description: Array of articles that matches the search query. # optional\n                    # Note: All property fields are accepted. e.g. order, hidden, default, etc.\n                    top:\n                      name: Top Article # optional\n                      description: Top article object that matches the search query # optional\n                      # Note: All property fields are accepted. e.g. top-order, hidden, default, etc.\n              summary: Article Search\n            tags:\n              - Stories\n      components:\n        schemas:\n          Doc:\n            properties:\n              _id:\n                type: string\n              blog:\n                items: {}\n                type: array\n              document_type:\n                description: Document type (article, multimedia).\n                type: string\n              headline:\n                properties:\n                  kicker:\n                    type: string\n                  main:\n                    type: string\n                    // highlight-next-line\n                    # If specified, will expose nested objects too. By default, only the first level are automatically surfaced.\n                    x-top:\n                      name: Main Headline\n                      # Note: All property fields are accepted. e.g. top-order, hidden, default, etc.\n                type: object\n              type_of_material:\n                description: Type of asset (Correction, News, Op-Ed, Review, Video, ...).\n                type: string\n              word_count:\n                description: Number of words in the article.\n                type: string\n            type: object\n        securitySchemes:\n          apikey:\n            in: query\n            name: api-key\n            type: apiKey\n'})}),"\n",(0,r.jsx)(n.p,{children:"Generated properties:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"apikey: # As specified by securitySchemas\n  # Note: apiKey is the property key, but will be mapped as api-key for the query parameter\n  datatype: text # All in: query paramters will be datatype as text (since it is query string)\n  io: input # All parameters will automatically be flagged as input\n  group: Query # All in: query is automatically grouped in Query\nquery: # As specified by x-key for paramter q\n  # Note: query is the property key, but will be mapped as q for the query parameter\n  name: Article Query # As specified by x-name for paramter q\n  description: Search query term. Search is performed on the article body, headline and byline. # Copied from above\n  datatype: text # All in: query paramters will be datatype as text (since it is query string)\n  required: true # As specified by paramters[0].required\n  io: input # All parameters will automatically be flagged as input\n  group: Query # All in: query is automatically grouped in Query\nbegin_date:\n  description: \"Format: YYYYMMDD Restricts responses to results with publication dates of the date specified or later.\" # Copied from above\n  datatype: text # All in: query paramters will be datatype as text (since it is query string)\n  required: true # As specified by paramters[0].required\n  io: input # All parameters will automatically be flagged as input\n  group: Query # All in: query is automatically grouped in Query\nresult:\n  description: The docs requested by the article search. # As specified by responses.\"200\".description\n\nresponse: # NOTE: response may clash with another property in fetch?\n  datatype: json # Infer as object from above\n  group: Result\n  script: SEARCH(GET('result'), 'response') # Each top level object will be returned. There is only 1 top level key in this example.\ndocs: # Specified in x-result-array\n  name: Articles # Specified in x-result-array\n  description: Array of articles that matches the search query. # Specified in x-result-array\n  datatype: json # Infer as object from above\n  group: Result\n  script: SEARCH(GET('result'), 'response.docs') # Specified in x-result-array.path\n\ntop_result:\n  name: Top Article # Default is 'Top Item'\n  description: Top article object that matches the search query # Specified in x-result-array\n  datatype: json # Infer as object from above\n  group: Top Result # Default group name if not provided in x-result-array\n  script: SEARCH(GET('result'), 'response.docs[0]') # Specified in x-result-array.path\n_id: \n  datatype: text # Specified as string above\n  group: Top Result # Default group name if not provided in x-result-array\n  script: SEARCH(GET('result'), 'response.docs[0]._id')\nblog:\n  datatype: json # Specified as array above\n  group: Top Result # Default group name if not provided in x-result-array\n  script: SEARCH(GET('result'), 'response.docs[0].blog')\ndocument_type:\n  datatype: text # Specified as string above\n  description: Document type (article, multimedia). # Specified above\n  group: Top Result # Default group name if not provided in x-result-array\n  script: SEARCH(GET('result'), 'response.docs[0].document_type')\nheadline:\n  datatype: json # Specified as object above\n  group: Top Result # Default group name if not provided in x-result-array\n  script: SEARCH(GET('result'), 'response.docs[0].headline')\nheadline_main: # Constructed key since x-top.key is not provided in headlines\n  name: Main Headline # Specified in x-top\n  datatype: text # Specified as string above\n  group: Top Result # Default group name if not provided in x-result-array\n  script: SEARCH(GET('result'), 'response.docs[0].headline.main')\ntype_of_material:\n  datatype: text # Specified as string above\n  description: Type of asset (Correction, News, Op-Ed, Review, Video, ...). # Specified above\n  group: Top Result # Default group name if not provided in x-result-array\n  script: SEARCH(GET('result'), 'response.docs[0].type_of_material')\nword_count:\n  datatype: text # Specified as string above\n  description: Number of words in the article. # Specified above\n  group: Top Result # Default group name if not provided in x-result-array\n  script: SEARCH(GET('result'), 'response.docs[0].word_count')\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);