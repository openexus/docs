"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[9168],{9627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(4848),a=n(8453);const i={sidebar_position:3},o="Embed",l={id:"learn/spec/generate/embed",title:"Embed",description:"Embed generates embeddable third-party data.",source:"@site/docs/learn/spec/generate/embed.mdx",sourceDirName:"learn/spec/generate",slug:"/learn/spec/generate/embed",permalink:"/docs/learn/spec/generate/embed",draft:!1,unlisted:!1,editUrl:"https://github.com/openexus/docs-source/tree/main/packages/create-docusaurus/templates/shared/docs/learn/spec/generate/embed.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Request",permalink:"/docs/learn/spec/generate/request"},next:{title:"Extends",permalink:"/docs/learn/spec/generate/extends"}},d={},s=[{value:"Minimal Example: Excalidraw",id:"minimal-example-excalidraw",level:2},{value:"Extended Example: YouTube",id:"extended-example-youtube",level:2},{value:"Advanced Example: Google Drive",id:"advanced-example-google-drive",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"embed",children:"Embed"}),"\n",(0,r.jsx)(t.p,{children:"Embed generates embeddable third-party data."}),"\n",(0,r.jsx)(t.h2,{id:"minimal-example-excalidraw",children:"Minimal Example: Excalidraw"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yml",metastring:'title="manifest.yaml"',children:"name: Excalidraw Embed\ngenerate:\n  type: iframe\n  config:\n    url: ((excalidraw_url))\nproperties:\n  excalidraw_url:  \n    description: Url of the excalidraw file\n    datatype: text\n    required: true\n"})}),"\n",(0,r.jsx)(t.h2,{id:"extended-example-youtube",children:"Extended Example: YouTube"}),"\n",(0,r.jsx)(t.p,{children:"Example with query params"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yml",metastring:'title="manifest.yaml"',children:"name: Youtube Embed\ndescription: Embed a YouTube video on the page!\nicon: mdi:youtube\ngenerate:\n  type: iframe\n  config:\n# option 1:\n    url: https://www.youtube.com/embed/((youtube_id))\n    params: autoplay,controls\n# option 2:\n    url: https://www.youtube.com/embed/((youtube_id))?autoplay&controls\n  # autoplay and controls are automatically dynamic ports\n# option 3:\n    url: https://www.youtube.com/embed/((youtube_id))?autoplay=((autoplay))&controls\n  # only autoplay is dynamic\nproperties:\n  youtube_id:  \n    description: Id of the youtube video\n    datatype: text\n    required: true\n  autoplay:\n    description: 'This parameter specifies whether the initial video will automatically start to play when the player loads. Supported values are 0 or 1. The default value is 0. If you enable Autoplay, playback will occur without any user interaction with the player; playback data collection and sharing will therefore occur upon page load.'\n    datatype: number\n    default: 0\n  controls:\n    description: 'This parameter indicates whether the video player controls are displayed. 0 = Player controls do not display in the player / 1 = Player controls display in the player.'\n    datatype: number\n    default: 1    \n"})}),"\n",(0,r.jsx)(t.h2,{id:"advanced-example-google-drive",children:"Advanced Example: Google Drive"}),"\n",(0,r.jsx)(t.p,{children:"Sometimes you need something a little more than just configuration. You can still mix in code."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yml",metastring:'title="manifest.yaml"',children:"name: Google Drive Embed\ngenerate:\n  type: iframe\nproperties:\n  google_drive_url:\n    description: Url to the folder of the google drive\n    datatype: text\n    required: true\n  view:\n    description: List or grid view\n    datatype:\n      type: option\n      options:\n      - list\n      - grid\n    required: true\n    default: list\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The code below will be inject ",(0,r.jsx)(t.strong,{children:"after"})," the generated module."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:'title="src/main.tsx"',children:"function extractFolderId(url?: string) {\n  return url?.split('folders/')[1].split('?')[0];\n}\nconst googleDriveFolderId = $.memo(() => {\n  const url = $.get('google_drive_url');\n  if (typeof url === 'string') return extractFolderId(url);\n  return undefined;\n});\n$.effect(() => {\n  const view = $.get('view');\n  if (googleDriveFolderId()) {\n    const url = `https://drive.google.com/embeddedfolderview?id=${googleDriveFolderId()}#${view}`;\n    $.set('url', url);\n  }\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var r=n(6540);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);