"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[3830],{8165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=t(4848),r=t(8453);const s={sidebar_position:1},o="UI & Slots",a={id:"learn/javascript/ui/ui-slots",title:"UI & Slots",description:"UI render function",source:"@site/docs/learn/javascript/ui/ui-slots.mdx",sourceDirName:"learn/javascript/ui",slug:"/learn/javascript/ui/ui-slots",permalink:"/docs/learn/javascript/ui/ui-slots",draft:!1,unlisted:!1,editUrl:"https://github.com/openexus/docs-source/tree/main/packages/create-docusaurus/templates/shared/docs/learn/javascript/ui/ui-slots.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Notification",permalink:"/docs/learn/javascript/notification"},next:{title:"JSX Attributes",permalink:"/docs/learn/javascript/ui/attributes"}},c={},d=[{value:"UI render function",id:"ui-render-function",level:2},{value:"Slot rendering",id:"slot-rendering",level:2},{value:"Advanced slot rendering",id:"advanced-slot-rendering",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"ui--slots",children:"UI & Slots"}),"\n",(0,i.jsx)(n.h2,{id:"ui-render-function",children:"UI render function"}),"\n",(0,i.jsxs)(n.p,{children:["A ((ui)) property that has ",(0,i.jsx)(n.code,{children:"html"})," as the datatype accepts a function that returns JSX as the data. To assign the function as the value of the ((ui)) property, you simply has to call ",(0,i.jsx)(n.code,{children:"context.set()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/main.tsx"',children:"function render() {\n  return <div>Hello World!</div>;\n}\n$.set('ui', render);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"slot-rendering",children:"Slot rendering"}),"\n",(0,i.jsxs)(n.p,{children:["If you have a property ((slot)) with datatype ",(0,i.jsx)(n.code,{children:"[html]"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"function render() {\n  return (\n    <Show when={$.get('slot').length > 0} fallback={<div>No UIs connected to slot!</div>}>\n      <div style={{ position: 'relative' }}>\n        <For each={$.get('slot')}>\n          {(ui, index) => (\n            <>\n              <div>{ui()}</div>\n            </>\n          )}\n        </For>\n      </div>\n    </Show>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-slot-rendering",children:"Advanced slot rendering"}),"\n",(0,i.jsxs)(n.p,{children:["If you need more metadata information about each UI in a ",(0,i.jsx)(n.code,{children:"[html]"})," property (e.g. name of the connected UI), you can call ",(0,i.jsx)(n.code,{children:"context.getExtended()"})," instead of ",(0,i.jsx)(n.code,{children:"context.get()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"function render() {\n  return (\n    <Show when={$.get('slot').length > 0} fallback={<div>No UIs connected to slot!</div>}>\n      <div style={{ position: 'relative' }}>\n        <For each={$.getExtended('slot')}>\n          {(ui, index) => (\n            <>\n              <div>{ui.id}</div>\n              <div>{ui.data()}</div>\n            </>\n          )}\n        </For>\n      </div>\n    </Show>\n  );\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);