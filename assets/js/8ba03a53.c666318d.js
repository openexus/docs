"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[9286],{7640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var c=n(4848),i=n(8453);const a={sidebar_position:4},r="Reactivity",s={id:"learn/javascript/reactivity",title:"Reactivity",description:"Reactivity is the core of how modules communicate with each other. To react to property value changes, there are 2 main ways to do it.",source:"@site/docs/learn/javascript/reactivity.mdx",sourceDirName:"learn/javascript",slug:"/learn/javascript/reactivity",permalink:"/docs/learn/javascript/reactivity",draft:!1,unlisted:!1,editUrl:"https://github.com/openexus/docs-source/tree/main/packages/create-docusaurus/templates/shared/docs/learn/javascript/reactivity.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Triggers and Actions",permalink:"/docs/learn/javascript/triggers-actions"},next:{title:"Instance Object",permalink:"/docs/learn/javascript/instance-object"}},o={},l=[{value:"JSX Reactivity",id:"jsx-reactivity",level:2},{value:"Reactive Property",id:"reactive-property",level:2},{value:"Effect",id:"effect",level:3},{value:"Subscription",id:"subscription",level:3},{value:"Memo",id:"memo",level:3},{value:"Local Reactivity",id:"local-reactivity",level:2},{value:"Advanced Reactivity",id:"advanced-reactivity",level:2},{value:"Batch",id:"batch",level:3},{value:"Multiple Subscriptions",id:"multiple-subscriptions",level:3},{value:"Subscribe to all properties",id:"subscribe-to-all-properties",level:3},{value:"Untrack",id:"untrack",level:3},{value:"On",id:"on",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h1,{id:"reactivity",children:"Reactivity"}),"\n",(0,c.jsx)(t.p,{children:"Reactivity is the core of how modules communicate with each other. To react to property value changes, there are 2 main ways to do it."}),"\n",(0,c.jsx)(t.h2,{id:"jsx-reactivity",children:"JSX Reactivity"}),"\n",(0,c.jsxs)(t.p,{children:["By default, using ",(0,c.jsx)(t.code,{children:"context.get()"})," within JSX will be automatically be reactive."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-tsx",metastring:'title="src/main.tsx"',children:"function render() {\n  // Automatically reevaluate when the ((name)) property value changes\n  return <div>Hello {context.get('name')}</div>;\n}\n$.set('ui', render);\n"})}),"\n",(0,c.jsx)(t.h2,{id:"reactive-property",children:"Reactive Property"}),"\n",(0,c.jsx)(t.p,{children:"Every properties are reactive."}),"\n",(0,c.jsx)(t.h3,{id:"effect",children:"Effect"}),"\n",(0,c.jsx)(t.p,{children:"Effect is automatically ran whenever any reactive properties changes. Effect cannot be removed once created. They are automatically removed when the module is disposed."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"import { effect } from '@modules-js/reactive';\n\neffect(() => {\n  // Automatic set ((double)) when ((count)) changes\n  context.set('double', context.get('count') * 2);\n});\n"})}),"\n",(0,c.jsx)(t.h3,{id:"subscription",children:"Subscription"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"const sub = context.subscribe('count', () => {\n  // Set ((double)) when ((count)) changes\n  context.set('double', context.get('count') * 2);\n});\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"setTimeout(() => {\n  // Stop listening to ((count)) changes after 10s\n  sub.unsubscribe(); \n}, 10000);\n"})}),"\n",(0,c.jsx)(t.h3,{id:"memo",children:"Memo"}),"\n",(0,c.jsx)(t.p,{children:"Memos let you efficiently use a derived value in many reactive computations. createMemo creates a readonly reactive value equal to the return value of the given function and makes sure that function only gets executed when its dependencies change."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"import { memo } from '@modules-js/reactive';\n\nconst value = memo(() => computeExpensiveValue(a(), b()));\n\n//read the value\nvalue();\n"})}),"\n",(0,c.jsx)(t.h2,{id:"local-reactivity",children:"Local Reactivity"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"const temp = context.addTempProperty({key: 'temp'});\ntemp.set('hello');\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"import { signal } from '@modules-js/reactivity';\n\nconst [count, setCount] = signal(5);\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"import { store } from '@modules-js/reactivity';\n\nconst [store, setStore] = store(5);\n"})}),"\n",(0,c.jsx)(t.h2,{id:"advanced-reactivity",children:"Advanced Reactivity"}),"\n",(0,c.jsx)(t.h3,{id:"batch",children:"Batch"}),"\n",(0,c.jsxs)(t.p,{children:["Every property value change will trigger fine-grained reactivity. If you want to update property values without triggering multiple reevaluations, you can update values in a single ",(0,c.jsx)(t.code,{children:"batch"})," wrapper."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"context.set('count', 12);\ncontext.set('max', 45);\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"import { batch } from '@modules-js/reactivity';\n\nbatch(() => {\n  context.set('count', 12);\n  context.set('max', 45);\n});\n"})}),"\n",(0,c.jsx)(t.h3,{id:"multiple-subscriptions",children:"Multiple Subscriptions"}),"\n",(0,c.jsx)(t.p,{children:"If you need to subscribe to mutliple properties at once, you can pass in an array of port keys."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"function callbackFn(path, data) {\n\t// should return cell instead of path?\n}\ncontext.subscribe(['property1', 'property2', ...], callbackFn); // subscribe to multiple ports\n"})}),"\n",(0,c.jsx)(t.h3,{id:"subscribe-to-all-properties",children:"Subscribe to all properties"}),"\n",(0,c.jsx)(t.p,{children:"This is useful if you have dynamic ports and you do know the port name ahead of time."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"function callbackFn(path, data) {\n\t// should return cell instead of path?\n}\ncontext.subscribeAll(callbackFn); \n"})}),"\n",(0,c.jsx)(t.h3,{id:"untrack",children:"Untrack"}),"\n",(0,c.jsx)(t.p,{children:"Ignores tracking any of the dependencies in the executing code block and returns the value."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"import { effect, untrack } from '@modules-js/reactive';\n\n// This effect will re-run only if multipler is updated\n// Will not re-run if count is updated\neffect(() => {\n  console.log(context.get('multipler'));\n  untrack(() => {\n    console.log(context.get('count'));\n  });\n});\n"})}),"\n",(0,c.jsx)(t.h3,{id:"on",children:"On"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"import { effect } from '@modules-js/reactive';\n\neffect(() => {\n  // Automatic set ((double)) when ((count)) changes\n  context.set('double', context.get('count') * 2);\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var c=n(6540);const i={},a=c.createContext(i);function r(e){const t=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),c.createElement(a.Provider,{value:t},e.children)}}}]);