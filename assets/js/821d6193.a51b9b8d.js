"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[1657],{3458:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=a(4848),r=a(8453);const s={sidebar_position:2},i="Read/Write Data",o={id:"learn/javascript/read-write",title:"Read/Write Data",description:"Reading and writing data to properties on the node is the most common and basic task you may need to develop a module.",source:"@site/docs/learn/javascript/read-write.mdx",sourceDirName:"learn/javascript",slug:"/learn/javascript/read-write",permalink:"/docs/learn/javascript/read-write",draft:!1,unlisted:!1,editUrl:"https://github.com/openexus/docs-source/tree/main/packages/create-docusaurus/templates/shared/docs/learn/javascript/read-write.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/learn/javascript/"},next:{title:"Triggers and Actions",permalink:"/docs/learn/javascript/triggers-actions"}},c={},d=[{value:"Read a property value",id:"read-a-property-value",level:2},{value:"Write value to a property",id:"write-value-to-a-property",level:2},{value:"Primitive values",id:"primitive-values",level:3},{value:"Update values",id:"update-values",level:3},{value:"Update object values",id:"update-object-values",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"readwrite-data",children:"Read/Write Data"}),"\n",(0,n.jsx)(t.p,{children:"Reading and writing data to properties on the node is the most common and basic task you may need to develop a module."}),"\n",(0,n.jsx)(t.h2,{id:"read-a-property-value",children:"Read a property value"}),"\n",(0,n.jsxs)(t.p,{children:["The recommended and simpliest way to read data from a property is to use ",(0,n.jsx)(t.code,{children:"context.get('{property_name}')"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yml",metastring:'title="properties.yaml"',children:"count:\n  datatype: number\n  default: 1\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:'title="main.js"',children:"console.log('Count is', context.get('count'));\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-markdown",metastring:'title="output"',children:"Count is 1\n"})}),"\n",(0,n.jsx)(t.h2,{id:"write-value-to-a-property",children:"Write value to a property"}),"\n",(0,n.jsx)(t.h3,{id:"primitive-values",children:"Primitive values"}),"\n",(0,n.jsxs)(t.p,{children:["The recommended and simpliest way to write a new value to a property is to use ",(0,n.jsx)(t.code,{children:"context.set('{property_name}', {value})"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:'title="main.js"',children:"console.log('Count is', context.get('count'));\n// highlight-next-line\ncontext.set('count', 2); // set value to a property\nconsole.log('Count is', context.get('count'));\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-markdown",metastring:'title="output"',children:"Count is 1\nCount is 2\n"})}),"\n",(0,n.jsx)(t.h3,{id:"update-values",children:"Update values"}),"\n",(0,n.jsxs)(t.p,{children:["If you need to reference the previous value, you can use ",(0,n.jsx)(t.code,{children:"context.update()"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:'title="main.js"',children:"context.update('count', (prev) => prev + 1);\n"})}),"\n",(0,n.jsx)(t.h3,{id:"update-object-values",children:"Update object values"}),"\n",(0,n.jsxs)(t.p,{children:["If you are working with objects, you can also do fine-grain updates using ",(0,n.jsx)(t.code,{children:"context.mutate"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Fine-grain mutations are preferred because we can reactivitly update the other connected properties in a fine-grained manner."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:'title="main.js"',children:"context.mutate((obj) => {\n  obj.list[0] = '123';\n  obj.list.push(456);\n});\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var n=a(6540);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);